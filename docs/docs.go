// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/group/requests": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Кинуть запрос ментору",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usersRoute.reqCreateHelp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/mentors/requests": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mentors"
                ],
                "summary": "Получить входящие запросы",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mentorsRoute.respGetRequest"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mentors"
                ],
                "summary": "Изменить состояние заявки",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mentorsRoute.reqUpdateRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/mentors/students": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mentors"
                ],
                "summary": "Получить моих учеников",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mentorsRoute.respGetMyStudent"
                            }
                        }
                    }
                }
            }
        },
        "/api/user/auth/sign-in": {
            "post": {
                "description": "Аунтефикация юзера. Возвращает токен, который в дальнейшем нужно передавать в заголовке \"Authorization\" в формате \"Bearer \u003cтокен\u003e\". Кусок \"Bearer \" нужно добавлять самому. Это фиксированное слово, которое ставят перед токеном зачем-то.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Аунтефикация",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usersRoute.reqLoginDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usersRoute.respLoginDto"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации",
                        "schema": {
                            "$ref": "#/definitions/httpError.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Неверный email или пароль",
                        "schema": {
                            "$ref": "#/definitions/httpError.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/user/avaliableMentors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получение доступных всех",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usersRoute.respGetMentor"
                            }
                        }
                    }
                }
            }
        },
        "/api/user/mentors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получение моих менторов",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usersRoute.respGetMyMentor"
                            }
                        }
                    }
                }
            }
        },
        "/api/user/profile": {
            "get": {
                "description": "Авторизация юзера",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получить инфу о себе",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usersRoute.resGetProfile"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации",
                        "schema": {
                            "$ref": "#/definitions/httpError.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/user/requests": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получить список моих запросов",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usersRoute.respGetHelp"
                            }
                        }
                    }
                }
            }
        },
        "/api/user/uploadAvatar": {
            "post": {
                "description": "Загрузка аватарки. Возвращает ссылку на аватарку, которая действует 7 дней",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "загрузка аватарки",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usersRoute.respUploadAvatarDto"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации",
                        "schema": {
                            "$ref": "#/definitions/httpError.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httpError.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "mentorsRoute.reqUpdateRequest": {
            "type": "object",
            "required": [
                "id",
                "status"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "mentorsRoute.respGetMyStudent": {
            "type": "object",
            "required": [
                "name",
                "student_id"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "student_id": {
                    "type": "string"
                }
            }
        },
        "mentorsRoute.respGetRequest": {
            "type": "object",
            "properties": {
                "goal": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "usersRoute.Pair": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "mentor_id": {
                    "type": "string"
                }
            }
        },
        "usersRoute.reqCreateHelp": {
            "type": "object",
            "required": [
                "goal",
                "requests"
            ],
            "properties": {
                "goal": {
                    "type": "string"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/usersRoute.Pair"
                    }
                }
            }
        },
        "usersRoute.reqLoginDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "usersRoute.resGetProfile": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "usersRoute.respGetHelp": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "goal": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mentor_id": {
                    "type": "string"
                },
                "mentor_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "usersRoute.respGetMentor": {
            "type": "object",
            "required": [
                "group_id",
                "mentor_id",
                "name"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "mentor_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "usersRoute.respGetMyMentor": {
            "type": "object",
            "required": [
                "mentor_id",
                "name"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "mentor_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "usersRoute.respLoginDto": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "usersRoute.respUploadAvatarDto": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "prod-team-14-mkg8u20m.final.prodcontest.ru",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GetMentor API",
	Description:      "GetMentor API docs",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
