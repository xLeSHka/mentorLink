basePath: /
definitions:
  groupsRoute.reqCreateGroupDto:
    properties:
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  groupsRoute.resGetMember:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  groupsRoute.respCreateGroup:
    properties:
      group_id:
        type: string
    type: object
  groupsRoute.respStat:
    properties:
      accepted_request_count:
        type: integer
      conversion:
        type: number
      help_request_count:
        type: integer
      mentors_count:
        type: integer
      rejected_request_count:
        type: integer
      students_count:
        type: integer
      total_count:
        type: integer
    type: object
  groupsRoute.respUpdateCode:
    properties:
      code:
        type: string
    type: object
  httpError.HTTPError:
    properties:
      message:
        type: string
    type: object
  mentorsRoute.reqUpdateRequest:
    properties:
      id:
        type: string
      status:
        type: boolean
    required:
    - id
    - status
    type: object
  mentorsRoute.respGetMyStudent:
    properties:
      avatar_url:
        type: string
      name:
        type: string
      student_id:
        type: string
    required:
    - name
    - student_id
    type: object
  mentorsRoute.respGetRequest:
    properties:
      avatar_url:
        type: string
      goal:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  usersRoute.Pair:
    properties:
      group_id:
        type: string
      mentor_id:
        type: string
    type: object
  usersRoute.reqCreateHelp:
    properties:
      goal:
        type: string
      requests:
        items:
          $ref: '#/definitions/usersRoute.Pair'
        type: array
    required:
    - goal
    - requests
    type: object
  usersRoute.reqLoginDto:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  usersRoute.resGetProfile:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      name:
        type: string
    type: object
  usersRoute.respGetHelp:
    properties:
      avatar_url:
        type: string
      goal:
        type: string
      id:
        type: string
      mentor_id:
        type: string
      mentor_name:
        type: string
      status:
        type: string
    type: object
  usersRoute.respGetMentor:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      group_id:
        type: string
      mentor_id:
        type: string
      name:
        type: string
    required:
    - group_id
    - mentor_id
    - name
    type: object
  usersRoute.respGetMyMentor:
    properties:
      avatar_url:
        type: string
      mentor_id:
        type: string
      name:
        type: string
    required:
    - mentor_id
    - name
    type: object
  usersRoute.respLoginDto:
    properties:
      token:
        type: string
    type: object
  usersRoute.respUploadAvatarDto:
    properties:
      url:
        type: string
    type: object
host: prod-team-14-mkg8u20m.final.prodcontest.ru
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: GetMentor API docs
  title: GetMentor API
  version: "1.0"
paths:
  /api/group:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/groupsRoute.reqCreateGroupDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/groupsRoute.respCreateGroup'
      tags:
      - Groups
  /api/groups/{groupID}/admin/inviteCode:
    post:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groupsRoute.respUpdateCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Обновить код приглашения
      tags:
      - Groups
  /api/groups/{groupID}/admin/members:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/groupsRoute.resGetMember'
            type: array
      summary: Список участников группы
      tags:
      - Groups
  /api/groups/{groupID}/admin/members/{memberID}/role:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Обновить роль юзера
      tags:
      - Groups
  /api/mentors/requests:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mentorsRoute.respGetRequest'
            type: array
      summary: Получить входящие запросы
      tags:
      - Mentors
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/mentorsRoute.reqUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Изменить состояние заявки
      tags:
      - Mentors
  /api/mentors/students:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mentorsRoute.respGetMyStudent'
            type: array
      summary: Получить моих учеников
      tags:
      - Mentors
  /api/user/auth/sign-in:
    post:
      consumes:
      - application/json
      description: Аунтефикация юзера. Возвращает токен, который в дальнейшем нужно
        передавать в заголовке "Authorization" в формате "Bearer <токен>". Кусок "Bearer
        " нужно добавлять самому. Это фиксированное слово, которое ставят перед токеном
        зачем-то.
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/usersRoute.reqLoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.respLoginDto'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Неверный email или пароль
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Аунтефикация
      tags:
      - Users
  /api/user/avaliableMentors:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usersRoute.respGetMentor'
            type: array
      summary: Получение доступных всех
      tags:
      - Users
  /api/user/mentors:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usersRoute.respGetMyMentor'
            type: array
      summary: Получение моих менторов
      tags:
      - Users
  /api/user/profile:
    get:
      consumes:
      - application/json
      description: Авторизация юзера
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.resGetProfile'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получить инфу о себе
      tags:
      - Users
  /api/user/requests:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usersRoute.respGetHelp'
            type: array
      summary: Получить список моих запросов
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/usersRoute.reqCreateHelp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Кинуть запрос ментору
      tags:
      - Users
  /api/user/uploadAvatar:
    post:
      consumes:
      - application/json
      description: Загрузка аватарки. Возвращает ссылку на аватарку, которая действует
        7 дней
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.respUploadAvatarDto'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: загрузка аватарки
      tags:
      - Users
  /groups/{GroupID}/stat:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groupsRoute.respStat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      tags:
      - Groups
  /groups/join/{code}:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Обновить роль юзера
      tags:
      - Groups
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
